@if(RenderHandler.HasData)
{
    <div class="pie @WrapperCss" style="@Style">
        <div class="pie-container" style="@RenderHandler.GetPieContainerStyle()">
            <svg class="pie-chart" viewBox="@((-Parameters.SeparationOffset).ToString(CultureInfo.InvariantCulture)) @((-Parameters.SeparationOffset).ToString(CultureInfo.InvariantCulture)) @(RenderHandler.TotalWith.ToString(CultureInfo.InvariantCulture)) @(RenderHandler.TotalHeight.ToString(CultureInfo.InvariantCulture))">
                @for(var i = 0; i < RenderHandler.Segments.Count; i++)
                {
                    var segment = RenderHandler.Segments[i];
                    <path d="@RenderHandler.CreateSvgPieSegment(segment)" fill="@segment.Pie.ChartColor"
                    @onclick="() => PieClick(segment)"
                    @onmouseenter="e => ShowLabel(segment, e)"
                    @onmouseleave="() => Leave()"
                    class="@(segment.Pie.IsSelected ? "is-selected":"")"
                    style="@(GetTransformStyle(segment) + AnimationHandler?.SegmentStyles[i])">
                    </path>
                }
            </svg>
            @if(Parameters.ShowLabels)
            {
                foreach(var segment in RenderHandler.Segments)
                {
                    <div class="pie-label-show" style="@GetPosition(segment)">@ShowLabelData(segment.Pie)</div>
                }
            }
            else
            {
                if(Parameters.ShowBiggestLabel)
                {
                    PieSegment segment = RenderHandler.Segments.FirstOrDefault(p => p.IsLargest == true) ?? null;
                    if(segment is not null)
                    {
                        <div class="pie-label" style="@BiggestStyle @GetPosition(segment)">@ShowLabelData(segment.Pie)</div>
                    }
                }
                <div class="pie-label" style="@LabelStyle">@ShowLabelData()</div>
            }
        </div>
        @if(ChildContent is null)
        {
            if(!string.IsNullOrEmpty(Parameters.Title))
            {
                <ul class="legent">
                    <li class="title">@Parameters.Title</li>
                    @foreach(var item in RenderHandler.Segments)
                    {
                        <li class="label"
                            @onmouseenter="e => ShowLabel(item, e)"
                            @onmouseleave="() => Leave()"
                            @onclick="() => PieClick(item)"
                            style="background-color: @item.Pie.ChartColor; color: @item.Pie.LabelColor">
                            @item.Pie.Name @(Math.Round(item.Pie.Value, 2).ToString("F2", CultureInfo.InvariantCulture))%
                        </li>
                    }
                </ul>
            }
        }
        else
        {
            @foreach(var item in RenderHandler.Segments)
            {
                @ChildContent(item.Pie)
            }
        }
    </div>
}