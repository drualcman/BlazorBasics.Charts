// BarChartWithPercentage.razor
@using System.Linq

<div class="bar-chart-container">
    <div class="chart-title">MobileAP Subs vs. Monthly Active Users</div>

    <div class="chart-legend">
        <div class="legend-item">
            <span class="legend-color active-users"></span>
            <span>Active Users</span>
        </div>
        <div class="legend-item">
            <span class="legend-color non-active-users"></span>
            <span>Non-Active Users</span>
        </div>
        <div class="legend-item">
            <span class="legend-line grand-total"></span>
            <span>% of Grand Total</span>
        </div>
        <div class="legend-item">
            <span class="legend-line active-percentage"></span>
            <span>% Total Users</span>
        </div>
    </div>

    <div class="chart-area">
        <svg class="chart-svg" xmlns="http://www.w3.org/2000/svg">
            <!-- Eje X -->
            <line x1="@margin" y1="@(chartHeight + margin)" x2="@(TotalWidth)" y2="@(chartHeight + margin)" stroke="#ccc" stroke-width="1" />

            @for(var i = 0; i < Data.Count; i++)
            {
                var item = Data[i];
                var columnTotal = item.ActiveUsers + item.NonActiveUsers;
                var activePercentage = columnTotal > 0 ? (item.ActiveUsers * 100.0 / columnTotal) : 0;
                var columnHeight = columnTotal * chartHeight / MaxColumnTotal;
                var grandTotalPercentage = columnTotal * 100.0 / GrandTotal;

                // Posiciones
                var x = margin + (i * (barWidth + spacing));
                var yBase = margin + chartHeight;

                // Barra de usuarios activos
                var activeHeight = columnHeight * activePercentage / 100;
                <rect x="@x" y="@(yBase - columnHeight)"
                      width="@barWidth"
                      height="@activeHeight"
                      fill="#4e79a7" />

                // Barra de usuarios inactivos
                <rect x="@x"
                      y="@(yBase - columnHeight + activeHeight)"
                      width="@barWidth"
                      height="@(columnHeight - activeHeight)"
                      fill="#f28e2b" />

                // Punto del porcentaje del total general
                var pointX = x + (barWidth / 2);
                var grandTotalPointY = yBase - (chartHeight * grandTotalPercentage / 100);
                GrandTotalPoints.Add(new(pointX, grandTotalPointY));

                // Punto del porcentaje activo
                var activePercentagePointY = yBase - columnHeight + (columnHeight * (100 - activePercentage) / 100);
                ActivePercentagePoints.Add(new(pointX, activePercentagePointY));

                // Círculos para los puntos
                <circle cx="@pointX" cy="@grandTotalPointY" r="5" fill="#e15759" />
                <circle cx="@pointX" cy="@activePercentagePointY" r="5" fill="#59a84b" />

                // Etiquetas usando el helper
                @(new MarkupString(SvgHelper.CreateSvgText($"{(int)grandTotalPercentage}%", pointX, (int)(grandTotalPointY - 15), "middle")))
                @(new MarkupString(SvgHelper.CreateSvgText($"{(int)activePercentage}%", pointX, (int)(activePercentagePointY - 15), "middle")))
                @(new MarkupString(SvgHelper.CreateSvgText(item.Month, (x + (barWidth / 2)), (int)(chartHeight + margin + 20), "middle")))
            }

            <!-- Línea del porcentaje del total general -->
            <polyline points="@string.Join(" ", GrandTotalPoints.Select(p => $"{p.X},{p.Y}"))"
                      fill="none" stroke="#e15759" stroke-width="2" />

            <!-- Línea del porcentaje activo -->
            <polyline points="@string.Join(" ", ActivePercentagePoints.Select(p => $"{p.X},{p.Y}"))"
                      fill="none" stroke="#59a84b" stroke-width="2" />
        </svg>
    </div>
</div>